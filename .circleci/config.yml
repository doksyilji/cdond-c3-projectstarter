version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1 &&
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1 
            # exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = curl https://kvdb.io/9tDAL53faqACSAjQTsGwmN/migration_${CIRCLE_WORKFLOW_ID:0:7}
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              cd backend
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend &&
            npm install &&
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend &&
            npm install &&
            npm run build
            # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-test]
      # Your job code here
      - run:
          name: Test front-end
          command: |
            cd frontend &&
            npm install &&
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-test]
      # Your job code here
      - run:
          name: Test back-end
          command: |
            cd backend &&
            npm install &&
            npm run test

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-scan]
      # Your job code here
      - run:
          name: check for known vulnerabilities
          command: |
              cd frontend &&
              npm install &&
              npm audit fix --audit-level=critical --force &&
              # npm install oauth-sign@^0.9.0
              npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-scan]
      # Your job code here
      - run:
          name: check for known vulnerabilities in packages
          command: |
              cd backend &&
              npm install minimist@1.2.6 &&
              npm install ajv@^6.12.3 &&              
              npm install &&
              npm audit fix --audit-level=critical --force &&
              npm audit fix --force &&
              # npm install oauth-sign@^0.9.0
              npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: US_EAST_1_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Ensure back-end infrastructure exists
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople 
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople \
              --region us-east-1 
              # exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              echo [all] > .circleci/ansible/inventory.txt
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name = tag:Name,Values = backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region us-east-1 \
              --output text >> .circleci/ansible/inventory.txt
              # exit 1
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      # Here's where you will add some code to rollback on failure    

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image:  alpine:latest
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: US_EAST_1_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints: "53:d6:66:21:ae:92:ca:dc:ff:a0:ea:1f:40:8c:07:94"
      # attach workspace
      - attach_workspace:
          at: ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible &&
            yum install -y tar gzip
            # exit 1
      - run:
          name: Configure server
          command: |
              cd .circleci/ansible &&
              ansible-playbook -i inventory.txt configure-server.yml
              # exit 1
      # Here's where you will add some code to rollback on failure      
      - destroy-environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend &&
            npm install &&
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
            # exit 1
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # If you are using memstash.io, generate the token "7933fe63-4687-4fa1-8426-aa25aa1730ec" on the website
                # curl -H "Content-Type: text/plain" -H "token: 7933fe63-4687-4fa1-8426-aa25aa1730ec" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/9tDAL53faqACSAjQTsGwmN/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
            # Here's where you will add some code to rollback on failure

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: US_EAST_1_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible &&
            yum install -y tar gzip &&
            yum install python3
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name = tag:Name,Values = backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region us-east-1 \
              --output text ) &&
            export API_URL="http://${BACKEND_IP}:3030" &&
            echo "API_URL = ${API_URL}" &&
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env &&
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend &&
            npm install &&
            npm run build &&
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist &&
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive &&
          # Here's where you will add some code to rollback on failure 
      - destroy-environment
      - revert-migrations     
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: alpine:latest
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: US_EAST_1_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints: "53:d6:66:21:ae:92:ca:dc:ff:a0:ea:1f:40:8c:07:94"      
      # attach workspace
      - attach_workspace:
          at: ~/project/.circleci/ansible/inventory.txt
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible &&
            yum install -y tar gzip &&
            yum install nodejs &&
            yum install npm
      - run:
          name: Deploy backend
          command: |
            cd backend &&
            npm i &&
            npm run build &&
            cd .. &&
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz . &&
            cd .circleci/ansible &&
            echo "Contents  of the inventory.txt file is -------" &&
            cat inventory.txt &&
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migration  



workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure
          #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]