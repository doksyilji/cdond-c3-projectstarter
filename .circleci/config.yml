version: 2.1

orbs:
  aws-cli: circleci/aws-cli@3.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string    
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> " 
            aws s3 rb s3://udapeople-<<parameters.workflow_id>>  --force 
            sleep 10 
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>> --region us-east-1
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>> --region us-east-1 

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/9tDAL53faqACSAjQTsGwmN/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi  

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend &&
            npm install &&
            npm run build
            # exit 1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend &&
            npm install minimist@1.2.6
            npm install ajv@^6.12.3
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-test]
      # Your job code here
      - run:
          name: Test front-end
          command: |
            cd frontend &&
            npm install &&
            npm run test
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-test]
      # Your job code here
      - run:
          name: Test back-end
          command: |
            cd backend &&
            npm install &&
            npm run test

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-scan]
      # Your job code here
      - run:
          name: check for known vulnerabilities
          command: |
              cd frontend &&
              npm install &&
              npm audit fix --audit-level=critical --force &&
              # npm install oauth-sign@^0.9.0
              npm audit --audit-level=critical

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-scan]
      # Your job code here
      - run:
          name: check for known vulnerabilities in packages
          command: |
              cd backend
              npm install minimist@1.2.6
              npm install ajv@^6.12.3        
              npm install &&
              npm audit fix --audit-level=critical --force
              npm audit fix --force
              # npm install oauth-sign@^0.9.0
              npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: US_EAST_1_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Ensure back-end infrastructure exists
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople 
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople \
              --region us-east-1

      - run: mkdir -p tmp_files
      - run: echo [web] > tmp_files/inventory.txt
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name = tag:Name,Values = backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region us-east-1 \
              --output text >> tmp_files/inventory.txt
      - persist_to_workspace:
          root: tmp_files
          paths:
            - inventory.txt
      - run: cat tmp_files/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure    

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image:  alpine:latest
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: US_EAST_1_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints: "53:d6:66:21:ae:92:ca:dc:ff:a0:ea:1f:40:8c:07:94"
      # attach workspace
      - attach_workspace:
          at: /tmp_files
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
              ansible-playbook -i /tmp_files/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run: sudo apt-get update && sudo apt-get install -y ca-certificates
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: US_EAST_1_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - restore_cache:
          name: Restore backend cache
          keys:
            - backend-build
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat ~/project/backend/migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl -k https://kvdb.io/9tDAL53faqACSAjQTsGwmN/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: alpine:latest
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: US_EAST_1_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update python3
            apk add --update nodejs
            apk add --update npm
            apk add --update tar gzip
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name = tag:Name,Values = backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region us-east-1 \
              --output text )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL = "http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive 
          # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: alpine:latest
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: US_EAST_1_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints: "53:d6:66:21:ae:92:ca:dc:ff:a0:ea:1f:40:8c:07:94"      
      # attach workspace
      - attach_workspace:
          at: /tmp_files
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip
            apk add --update nodejs
            apk add --update npm
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -czf artifact.tar.gz backend
            mv artifact.tar.gz .circleci/ansible/artifact.tar.gz
            ls .circleci/ansible/
            ansible-playbook -i /tmp_files/inventory.txt .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: alpine:latest     
    steps:
      # Checkout code from git
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: US_EAST_1_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Install dependencies
          command: |
            apk add --update curl 
            apk add --update nodejs
            apk add --update npm
      - run:
          name: Get backend url
          command: |
              # Fetch and prepare the BACKEND_IP env var
              export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name = tag:Name,Values = backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region us-east-1 \
              --output text )
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                  return 0
              else
                  return 1
              fi
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                return 0
              else
                return 1
              fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git    
      - checkout
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-region: US_EAST_1_REGION
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Install dependencies
          command: |
            # your code here
            echo "Nothin yet"
      - run:
          name: Update cloudfront distribution
          command: |
            # Change the initial stack name, as applicable to you
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
      docker:
        # Docker image here
        - image: alpine:latest
      steps:
        # Checkout code from git
        - checkout
        - run:
            name: Install dependencies
            command: |
              apk add --update curl 
        - aws-cli/setup:
            aws-access-key-id: AWS_ACCESS_KEY_ID
            aws-region: US_EAST_1_REGION
            aws-secret-access-key: AWS_SECRET_ACCESS_KEY
        - run:
            name: Get Old Stack ID
            command: |
              export OLDWORKFLOWID=$(curl --insecure  https://kvdb.io/9tDAL53faqACSAjQTsGwmN/old_id)
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
              echo OLDWORKFLOWID "${OLDWORKFLOWID}"
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OLDWORKFLOWID}" ]]
              then
              aws s3 rb s3://udapeople-"${OLDWORKFLOWID}" --force
              sleep 2
              aws cloudformation delete-stack --stack-name udapeople-backend-"${OLDWORKFLOWID}" --region us-east-1
              aws cloudformation delete-stack --stack-name udapeople-frontend-"${OLDWORKFLOWID}" --region us-east-1
              else
              echo "No old stack found"
              fi
              curl -k --insecure https://kvdb.io/9tDAL53faqACSAjQTsGwmN/old_id  -d "${CIRCLE_WORKFLOW_ID:0:7}"
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
